<?php

/**
 * @file
 * Contains badcamp_stripe_payment.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\badcamp_stripe_payment\EventSubscriber\DonateRedirectSubscriber;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function badcamp_stripe_payment_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the badcamp_stripe_payment module.
    case 'help.page.badcamp_stripe_payment':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides integration of the Stripe payment processing service by providing a charging and refund service as well as an entity that will store the payment data for each payment made.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function badcamp_stripe_payment_theme() {
  $theme = [];
  $theme['stripe_payment'] = array(
    'render element' => 'elements',
    'file' => 'stripe_payment.page.inc',
    'template' => 'stripe_payment',
  );
  $theme['stripe_payment_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'stripe_payment.page.inc',
  ];
  $theme['stripe_checkout'] = [
    'variables' => [
      'data_key' => NULL,
      'description' => NULL,
      'payment_type' => NULL,
      'amount' => NULL,
      'email' => NULL,
      'org_name' => NULL,
      'data_description' => NULL,
      'data_zip_code' => NULL,
      'button_label' => NULL,
      'entity_type' => NULL,
      'entity_id' => NULL,
      'logo' => NULL,
    ],
    'template' => 'stripe_checkout'
  ];
  $theme['stripe_checkout_complete'] = [
    'variables' => [
      'message' => NULL,
      'amount' => NULL,
      'statement_indicator' => NULL
    ],
    'template' => 'stripe_checkout_complete'
  ];
  $theme['stripe_checkout_error'] = [
    'variables' => [
      'message' => NULL,
      'error' => NULL,
      'decline_code' => NULL
    ],
    'template' => 'stripe_checkout_error'
  ];
  $theme['#cache']['max-age'] = 0;
  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function badcamp_stripe_payment_preprocess_stripe_checkout(&$variables) {
  $logo = theme_get_setting('logo');
  $variables['logo'] = $logo['url'];
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function badcamp_stripe_payment_theme_suggestions_stripe_payment(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#stripe_payment'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'stripe_payment__' . $sanitized_view_mode;
  $suggestions[] = 'stripe_payment__' . $entity->bundle();
  $suggestions[] = 'stripe_payment__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'stripe_payment__' . $entity->id();
  $suggestions[] = 'stripe_payment__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_stripe_payment_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'badcamp_stripe_register_redirect_submit';
}

function badcamp_stripe_register_redirect_submit(&$form, FormStateInterface &$form_state) {
  //get the user
  $account = User::load(\Drupal::currentUser()->id());
  // get donations
  $DSub = new DonateRedirectSubscriber;
  $donations = $DSub->_get_donations($account->id());
  //Take them to donations page if they have none. Which should normally be the
  //case.
  if (count($donations) < 1) {
    $redirect_url = URL::fromRoute('badcamp_stripe_payment.donation_page_controller');
    $form_state->setRedirectUrl($redirect_url);
  }

}

/**
 * Implements hook_entity_operation().
 */
function badcamp_stripe_payment_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  $operations = [];
  if ($entity->getEntityTypeId() == 'stripe_payment') {
    $account = \Drupal::currentUser();
    if ($account->hasPermission('administer stripe payment entities') && $entity->get('refunded')->first()->getValue()['value'] != 1) {
      $operations['refund-payment'] = array(
        'title' => t('Refund Payment'),
        'weight' => 15,
        'url' => Url::fromRoute("badcamp_stripe_payment.refund", [
          $entity->getEntityTypeId() => $entity->id(),
        ],[
          'query' => [
            'destination' =>  \Drupal::service('path.current')->getPath()
          ]
        ]),
      );
    }
  }

  return $operations;
}